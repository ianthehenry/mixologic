.type Ingredient <: symbol
.type Recipe <: symbol

.decl Has(x : Ingredient)
.input Has(filename="bar")

.decl Needs(drink : Recipe, ingredient : Ingredient)
.input Needs(filename="recipes", delimiter=" <- ")

.decl IsRecipe(x : Recipe)
IsRecipe(x) :- Needs(x, _).

.decl IsIngredient(x : Ingredient)
IsIngredient(x) :- Needs(_, x).

.decl Begets(in : Ingredient, out : Ingredient)

Begets(x, x) :- IsIngredient(x).

Has(out) :- Has(in), Begets(in, out).

.decl Missing(drink : Recipe, ingredient : Ingredient)
Missing(drink, ingredient) :- Needs(drink, ingredient), !Has(ingredient).

.decl Mixable(drink : Recipe)
Mixable(drink) :- IsRecipe(drink), !Missing(drink, _).

.decl Enables(missing : Ingredient, drink : Recipe)
Enables(ingredient, drink) :-
  Missing(drink, out),
  Begets(ingredient, out),
  count : { Missing(drink, _) } =
  count : { Begets(ingredient, product), Missing(drink, product) }
.

.output Mixable(filename="mixable", delimiter=":")
.output Enables(filename="shopping-list", delimiter=" -> ")

Begets("lime", "lime cordial") :- Has("sugar").
Begets("sugar", "lime cordial") :- Has("lime").

Begets("lime", "lime juice").
Begets("lemon", "lemon juice").
Begets("honey", "honey syrup").

Begets("reposado tequila", "tequila").
Begets("blanco tequila", "tequila").
Begets("cointreau", "triple sec").
Begets("old tom gin", "gin").
