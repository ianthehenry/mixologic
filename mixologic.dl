.type Ingredient <: symbol
.type Recipe <: symbol

.decl Has(x : Ingredient)
.input Has(filename="bar")

.decl Needs(drink : Recipe, ingredient : Ingredient)
.input Needs(filename="recipes", delimiter=" <- ")

.decl Composite(result : Ingredient, first : Ingredient, second : Ingredient)
.input Composite(filename="composites", delimiter=", ")

.decl IsRecipe(x : Recipe)
IsRecipe(x) :- Needs(x, _).

.decl IsIngredient(x : Ingredient)
IsIngredient(x) :- Needs(_, x).
IsIngredient(x) :- Composite(x, _, _).
IsIngredient(x) :- Composite(_, x, _).
IsIngredient(x) :- Composite(_, _, x).

.decl Unbuyable(x : Ingredient)
.input Unbuyable(filename="unbuyable")
.input Unbuyable(filename="auto-unbuyable")

.decl Begets(in : Ingredient, out : Ingredient)
.input Begets(filename="begets", delimiter=" -> ")
.input Begets(filename="auto-begets", delimiter=" -> ")

Begets(x, x) :- IsIngredient(x).

Begets(x, result) :- Composite(result, first, second), Has(y), Begets(x, first), Begets(y, second).
Begets(y, result) :- Composite(result, first, second), Has(x), Begets(x, first), Begets(y, second).

Has(out) :- Has(in), Begets(in, out).

.decl Missing(drink : Recipe, ingredient : Ingredient)
Missing(drink, ingredient) :- Needs(drink, ingredient), !Has(ingredient).

.decl Mixable(drink : Recipe)
Mixable(drink) :- IsRecipe(drink), !Missing(drink, _).

.decl Enables(missing : Ingredient, drink : Recipe)
Enables(ingredient, drink) :-
  !Unbuyable(ingredient),
  Missing(drink, out),
  Begets(ingredient, out),
  count : { Missing(drink, _) } =
  count : { Begets(ingredient, product), Missing(drink, product) }
.

.output Mixable(filename="mixable")
.output Enables(filename="shopping-list", delimiter=" -> ")
