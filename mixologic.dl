.type Ingredient <: symbol
.type Recipe <: symbol

.decl Has(x : Ingredient)
.input Has(filename="bar")

.decl Needs(drink : Recipe, ingredient : Ingredient)
.input Needs(filename="recipes", delimiter=" <- ")

.decl IsRecipe(x : Recipe)
IsRecipe(x) :- Needs(x, _).

.decl IsIngredient(x : Ingredient)
IsIngredient(x) :- Needs(_, x).

.decl Unbuyable(x : Ingredient)
.input Unbuyable(filename="unbuyable")
.input Unbuyable(filename="auto-unbuyable")

.decl Begets(in : Ingredient, out : Ingredient)
.input Begets(filename="begets", delimiter=" -> ")
.input Begets(filename="auto-begets", delimiter=" -> ")

Begets(x, x) :- IsIngredient(x).

Has(out) :- Has(in), Begets(in, out).

.decl Missing(drink : Recipe, ingredient : Ingredient)
Missing(drink, ingredient) :- Needs(drink, ingredient), !Has(ingredient).

.decl Mixable(drink : Recipe)
Mixable(drink) :- IsRecipe(drink), !Missing(drink, _).

.decl Enables(missing : Ingredient, drink : Recipe)
Enables(ingredient, drink) :-
  !Unbuyable(ingredient),
  Missing(drink, out),
  Begets(ingredient, out),
  count : { Missing(drink, _) } =
  count : { Begets(ingredient, product), Missing(drink, product) }
.

Begets("lime", "lime cordial") :- Has("sugar").
Begets("sugar", "lime cordial") :- Has("lime").

Begets("sugar", "raspberry syrup") :- Has("raspberry").
Begets("raspberry", "raspberry syrup") :- Has("sugar").

Begets("pineapple", "pineapple syrup") :- Has("sugar").
Begets("sugar", "pineapple syrup") :- Has("pineapple").

Begets("ginger", "ginger syrup") :- Has("sugar").
Begets("sugar", "ginger syrup") :- Has("ginger").

Begets("sage", "sage syrup") :- Has("sugar").
Begets("sugar", "sage syrup") :- Has("sage").

Begets("cinnamon sticks", "cinnamon syrup") :- Has("sugar").
Begets("sugar", "cinnamon syrup") :- Has("cinnamon sticks").

.output Mixable(filename="mixable")
.output Enables(filename="shopping-list", delimiter=" -> ")
